-- ISIN --
select
group_concat(series_number separator ' + ') as 'Series Number',
group_concat(account_id separator ' + ') as 'Account Number',
security_description as 'ISIN',
sum(case when currency = 'USD' then opening_position / (select usd_eur_begin from quarterly_reporting_setup where id = 0)
		 when currency = 'CAD' then opening_position / (select cad_eur_begin from quarterly_reporting_setup where id = 0)
         when currency = 'GBP' then opening_position / (select gbp_eur_begin from quarterly_reporting_setup where id = 0)
		 when currency = 'EUR' then opening_position
	else 0 end) / 1000 as 'Opening Position',
sum(case when currency = 'USD' then purchases / (select usd_eur_end from quarterly_reporting_setup where id = 0)
		 when currency = 'CAD' then purchases / (select cad_eur_end from quarterly_reporting_setup where id = 0)
         when currency = 'GBP' then purchases / (select gbp_eur_end from quarterly_reporting_setup where id = 0)
		 when currency = 'EUR' then purchases
	else 0 end) / 1000 as 'Transactions - Purchases',
sum(case when currency = 'USD' then sales / (select usd_eur_end from quarterly_reporting_setup where id = 0)
		 when currency = 'CAD' then sales / (select cad_eur_end from quarterly_reporting_setup where id = 0)
         when currency = 'GBP' then sales / (select gbp_eur_end from quarterly_reporting_setup where id = 0)
		 when currency = 'EUR' then sales
	else 0 end) / 1000 as 'Transactions - Sales',
sum(case when currency = 'USD' then closing_position / (select usd_eur_end from quarterly_reporting_setup where id = 0)
		 when currency = 'CAD' then closing_position / (select cad_eur_end from quarterly_reporting_setup where id = 0)
         when currency = 'GBP' then closing_position / (select gbp_eur_end from quarterly_reporting_setup where id = 0)
		 when currency = 'EUR' then closing_position
	else 0 end) / 1000 as 'Closing Position',
avg(market_price_at_quarter_end) as 'Market price at quarter-end',
avg(yield) as 'Yield',
maturity_date as 'Maturity date',
original_maturity as 'Original maturity'

from (
-- PERSHING --
select
distinct(replace (substring(t1.description, locate('ISIN', t1.description) + 5, 14), ' ', '')) security_description,
t0.series_number,
account account_id,
coalesce(t2_bq.market_value, 0) opening_position,
sum(case when t1.net_amount < 0 and settlement_date >= (select pershing_start_date from quarterly_reporting_setup where id = 0) and settlement_date <= (select pershing_end_date from quarterly_reporting_setup where id = 0) then abs(t1.net_amount) else 0 end) purchases,
sum(case when t1.net_amount > 0 and settlement_date >= (select pershing_start_date from quarterly_reporting_setup where id = 0) and settlement_date <= (select pershing_end_date from quarterly_reporting_setup where id = 0) then abs(t1.net_amount) else 0 end) sales,
coalesce(t2_eq.market_value, 0) closing_position,
coalesce(t2_eq.price, 0) market_price_at_quarter_end,
coalesce(t2_eq.current_yield, t2_bq.current_yield) yield,
coalesce(t2_eq.maturity_date, t2_bq.maturity_date) maturity_date,
'USD' currency,
'Over two years' original_maturity
from series_product_information t0
join (select * from pershing_trades where locate('BUY', description) > 0 or locate('SELL', description) > 0) t1 on (locate(t1.account, t0.account_number) > 0)
left outer join pershing_positions t2_bq on (t1.account = t2_bq.account_number and t1.cusip = t2_bq.cusip and t2_bq.period in ((select pershing_start_date from quarterly_reporting_setup where id = 0)))
left outer join pershing_positions t2_eq on (t1.account = t2_eq.account_number and t1.cusip = t2_eq.cusip and t2_eq.period in ((select pershing_end_date from quarterly_reporting_setup where id = 0)))
where 1=1
and (t2_bq.asset_classification = 'FIXED INCOME' or t2_eq.asset_classification='FIXED INCOME' or t2_bq.cusip = '06051VTX4')
and locate('ISIN', t1.description)  > 0
and (t2_bq.market_value is not null or t2_eq.market_value is not null)
group by security_description, t0.series_number, account_id, opening_position, closing_position, market_price_at_quarter_end, yield, maturity_date,  original_maturity, currency

UNION
-- CITIBANK --
select
t1.isin security_description,
t0.series_number,
t1.account_id account_id,
coalesce(t2_bq.market_value, 0) opening_position,
sum(case when t1.transaction_type in ('RVP', 'RF')
			and t1.settlement_date >= (select citibank_start_date from quarterly_reporting_setup where id = 0)
            and t1.settlement_date <= (select citibank_end_date from quarterly_reporting_setup where id = 0)
		 then abs(t1.setltement_amount) else 0 end) purchases,
sum(case when t1.transaction_type in ('DVP', 'DF')
	        and t1.settlement_date >= (select citibank_start_date from quarterly_reporting_setup where id = 0)
            and t1.settlement_date <= (select citibank_end_date from quarterly_reporting_setup where id = 0)
		 then abs(t1.setltement_amount) else 0 end)  sales,
coalesce(t2_eq.market_value, 0) closing_position,
coalesce(t2_eq.market_value / t2_eq.settled_quantity * 100, 0)  market_price_at_quarter_end,
coalesce(t2_eq.interest_rate, t2_bq.interest_rate, 0)  yield,
coalesce(t2_eq.maturity_date, t2_bq.maturity_date) maturity_date,
coalesce(t2_eq.currency, t2_bq.currency, t1.currency) currency,
'Over two years' original_maturity
from
(select distinct(series_number) from series_names) t01
join series_product_information t0 on (t01.series_number = t0.series_number)
join (select * from citi_all_transactions) t1 on (locate(t1.account_id, t0.account_number) > 0)
left outer join (select f.*, v.market_value, v.currency from citi_fixed_income_settled_position f, citi_positions_valuations v where f.account_id = v.account_id and f.isin= v.isin and f.as_of_date = v.as_of_date)
	t2_bq on (t1.account_id = t2_bq.account_id and t1.isin = t2_bq.isin and t2_bq.as_of_date in ((select citibank_start_date from quarterly_reporting_setup where id = 0)))
left outer join (select f.*, v.market_value , v.currency from citi_fixed_income_settled_position f, citi_positions_valuations v where f.account_id = v.account_id and f.isin= v.isin and f.as_of_date = v.as_of_date)
	t2_eq on (t1.account_id = t2_eq.account_id and t1.isin = t2_eq.isin and t2_eq.as_of_date in ((select citibank_end_date from quarterly_reporting_setup where id = 0)))
where 1=1
and t1.account_id not in ('6017709722')
and t1.isin in (select distinct(isin) from citi_fixed_income_settled_position)
and (t2_bq.market_value is not null or t2_eq.market_value is not null)
group by security_description, series_number, account_id, opening_position, closing_position, market_price_at_quarter_end, yield, maturity_date, original_maturity, currency

Union
-- Interactive brokers XS0918292151
select
coalesce(t2_eq.security_id, t2_bq.security_id) security_description,
t0.series_number,
coalesce(t2_eq.account_id, t2_bq.account_id) account_id,
coalesce(t2_bq.market_value, 0) opening_position,
sum(case when t1.gross_amount < 0 and settle_date > ((select ib_start_date from quarterly_reporting_setup where id = 0)) and settle_date < ((select ib_end_date from quarterly_reporting_setup where id = 0))
		then abs(t1.gross_amount) else 0 end) purchases,
sum(case when t1.gross_amount > 0 and settle_date > ((select ib_start_date from quarterly_reporting_setup where id = 0)) and settle_date < ((select ib_end_date from quarterly_reporting_setup where id = 0))
		then abs(t1.gross_amount) else 0 end) sales,
coalesce(t2_eq.market_value, 0) closing_position,
coalesce(t2_eq.market_price, 0) market_price_at_quarter_end,
0 yield,
0 maturity_date,
coalesce(t2_eq.currency, t2_bq.currency) currency,
'Over two years' original_maturity
from (select series_number, account_number from series_product_information) t0
join (select * from ib_positions where security_id = 'XS0918292151' and report_date in ((select ib_start_date from quarterly_reporting_setup where id = 0))) t2_bq on (locate(t2_bq.account_id, t0.account_number) > 0)
left outer join (select * from ib_positions where security_id = 'XS0918292151' and report_date in ((select ib_end_date from quarterly_reporting_setup where id = 0))) t2_eq on (t2_bq.account_id = t2_eq.account_id and t2_bq.security_id = t2_eq.security_id)
left outer join ib_activity t1 on (t1.account_id = t2_eq.account_id and t1.security_id = t2_eq.security_id)
where 1=1
group by security_description, series_number,  account_id, opening_position, closing_position, market_price_at_quarter_end, yield, maturity_date, original_maturity, currency
order by series_number asc, closing_position desc
) a
group by security_description, original_maturity, maturity_date, currency;
